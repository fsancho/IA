;---------------------------------------------------------------------------
; Nodes to build de Tree Search
;---------------------------------------------------------------------------
extensions [table]
globals [
  MCTS:Graph
]

to-report MCTS:node [Nodeid]
  report table:get MCTS:Graph Nodeid
end

to-report state-of [Nodeid]
  let N MCTS:node Nodeid
  report table:get N "state"
end

to-report untriedRules-of [Nodeid]
  let N MCTS:node Nodeid
  report table:get N "untriedRules"
end

to-report children-of [Nodeid]
  let N MCTS:node Nodeid
  report table:get N "children"
end

to-report visits-of [Nodeid]
  let N MCTS:node Nodeid
  report table:get N "visits"
end

to-report wins-of [Nodeid]
  let N MCTS:node Nodeid
  report table:get N "wins"
end

to-report parent-of [Nodeid]
  let N MCTS:node Nodeid
  report table:get N "parent"
end

to TbGr:print [T]
  foreach (table:keys T) [
    N ->
    print MCTS:node N
  ]
end

;---------------------------------------------------------------------------
; MCTS Nodes Procedures
;---------------------------------------------------------------------------

; Create a new node from state s. This node will be the root of the search (the current game state)
; s -> id
to-report MCTS:new-node [s]
  let rep table:make
  table:put rep "state" s
  table:put rep "parent" []
  table:put rep "children" []
  table:put rep "wins" 0
  table:put rep "visits" 0
  table:put rep "untriedRules" MCTS:get-rules s
  let Nodeid 1 + table:length MCTS:Graph
  table:put MCTS:Graph Nodeid rep
  report Nodeid
end

; Use the UCB1 formula to return the child with highest UCB value (after the previous simulations)
; The 2 summands try to balance between explotation and exploration
; id -> id
to-report MCTS:UCTSelectChild [Nodeid]
  let v    visits-of Nodeid
  let M 0 
  let MN 0
  foreach children-of Nodeid
  [
    ch -> 
    let chId   first ch
    let wins   wins-of   chId
    let visits visits-of chId
    let calc   (wins / visits) + sqrt(2 * (ln v) / visits)
    if calc > M [
      set M  calc
      set MN chId]
  ]
  report MN
end

; Creates a new child from the current node by applying the rule r, then it removes this rule from 
; untriedRules
; id r -> id
to-report MCTS:AddChild [Nodeid r]
  let state      state-of Nodeid
  let parentNode MCTS:Node Nodeid
  let newState   MCTS:apply r state
  let newChildId MCTS:new-node newState
  let newChild   MCTS:Node newChildId
  table:put parentNode "children"     (lput (list newChildId r) (children-of Nodeid))
  table:put newChild   "parent"       (list Nodeid r)
  table:put parentNode "untriedRules" remove r (untriedRules-of Nodeid)
  report    newChildId
end

; Update the wins/visits values for the current node 
to MCTS:Update [Nodeid result]
  let Node MCTS:node Nodeid
  table:put Node "visits" (visits-of Nodeid) + 1
  table:put Node "wins"   (wins-of Nodeid)   + result
end


;---------------------------------------------------------------------------
; UCT Algorithm
;---------------------------------------------------------------------------

; Execute a UCT search for iter iterations starting from root-state.
; Return the best move from the root-state. 
; The games results is in the range [0.0, 1.0]
to-report MCTS:UCT [root-state iter]
  let ti timer
  set MCTS:Graph table:make
  ; Create the root node (with the input state)
  let root-id MCTS:new-node root-state
  
  ;Main loop for iter iterations
  repeat iter [
    ; Start again from the root node
    let cid     root-id
    
    ; Selection stage: 
    ;   Using UCT selection. we go from the root node to a current leaf that 
    ;   has to be expanded
    
    while [empty? (untriedRules-of cid) and not empty? (children-of cid)]
    [
      set cid     MCTS:UCTSelectChild cid
    ]

    ; Expand stage: 
    ;   Expand the previous node with one child (any of them)
    
    ; if we can expand (i.e. state/node is non-terminal)
    ; set curnode MCTS:node cnode
    if not empty? (untriedRules-of cid)
    [
      let rule    one-of untriedRules-of cid
      set cid     MCTS:AddChild cid rule
    ]

    ; Simulation/Rollout stage: 
    ;   From this new node we play a random complete game (we use only states, 
    ;   not nodes, because we only need to know the final state and who is the 
    ;   winnner)
    let tempId cid
    let temps  state-of cid
    while [not empty? MCTS:get-rules temps]
    [
      let rule  one-of (MCTS:get-rules temps)
      set temps (MCTS:apply rule temps)
    ]
    ; Backpropagate stage: 
    ;   Update the nodes from the expanded one to the root
      
    while [cid != false] 
    [
      let cstate  state-of cid
      MCTS:Update cid MCTS:get-result temps (MCTS:get-playerJustMoved cstate)
      let par     parent-of cid
      set cid     ifelse-value par != [] [first par] [false]
    ]
  ]
  ; Return the best found rule
  let M        0
  let Mn       0
  let children children-of root-id
  foreach children
  [
    ch -> 
    let Nch    first ch
    let visits visits-of Nch
    if visits > M [
      set M visits
      set MN ch
    ]
  ]
  show timer - ti
  report last Mn
end